import re
import json
import sys

def generate_macros_json(sty_content):
    """
    Parses LaTeX .sty content to find simple Agda term macros
    and generates a JSON dictionary for replacement.
    """
    # Regex to find \newcommand{\MacroName}{\AgdaCommand{...}} patterns
    # This is a simplified pattern, might need refinement based on variations
    # It captures the MacroName. Assumes the replacement is \texttt{MacroName}
    # Allows for potential spaces and variations in AgdaCommand structure
    pattern = re.compile(r'^\\newcommand\{\\([a-zA-Z@]+)\}\s*\{\s*\\Agda[a-zA-Z]+\{.*?\}\s*\}', re.MULTILINE)

    agda_terms_dict = {}
    for match in pattern.finditer(sty_content):
        macro_name = match.group(1)
        # Create the replacement string: \texttt{macro_name}
        # Need to escape backslashes for JSON output (so \\ becomes \ in JSON string)
        replacement_string = f"\\\\texttt{{{macro_name}}}"
        agda_terms_dict[macro_name] = replacement_string

    # Structure for the JSON file
    output_json = {
        "//": "Auto-generated by generate_macro_json.py from macros.sty",
        "agda_terms": agda_terms_dict,
        "placeholders": {
             # Add placeholder definitions manually or via other parsing logic if needed
             # e.g., "hldiff": "\\\\HighlightPlaceholder{#1}"
        }
    }

    return json.dumps(output_json, indent=2)

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"Usage: python {sys.argv[0]} <input_macros_sty_file> <output_macros_json_file>")
        sys.exit(1)

    input_sty_file = sys.argv[1]
    output_json_file = sys.argv[2]

    try:
        with open(input_sty_file, 'r', encoding='utf-8') as f:
            sty_input_content = f.read()

        json_output = generate_macros_json(sty_input_content)

        with open(output_json_file, 'w', encoding='utf-8') as f:
            f.write(json_output)

        print(f"Successfully generated {output_json_file} from {input_sty_file}")

    except FileNotFoundError:
        print(f"Error: Input file not found: {input_sty_file}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"An error occurred: {e}", file=sys.stderr)
        sys.exit(1)
